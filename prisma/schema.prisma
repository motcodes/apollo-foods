// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project-node-postgres
// https://vercel.com/guides/nextjs-prisma-postgres


// env("DATABASE_URL") uses the DB-url in the env file

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// This Prisma schema defines 3 model
// There are two one-to-many relation between User and Creation,
// via the author field on Creation and the creations field on User
// and between User and SocialLinks,
// via the author field on SocialLinks and the sociallinks field on User

// to create the tables run: 
// npx prisma db push --preview-feature

// to open db studio
// npx prisma studio

// NextAuth
model Account {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int           @default(autoincrement()) @id
  name          String?   
  email         String?       @unique
  emailVerified DateTime?     @map(name: "email_verified")
  image         String?   
  createdAt     DateTime      @default(now()) @map(name: "created_at")
  updatedAt     DateTime      @default(now()) @map(name: "updated_at")

  // Custom Fields    
  bio           String?   
  username      String?       @unique
  website       String?
  twitter       String?
  instagram     String?
  reddit        String?
  dribbble      String?
  github        String?
  meals         Meal[]

  @@map(name: "users")
}

model VerificationRequest {
  id         Int       @default(autoincrement()) @id
  identifier String
  token      String    @unique
  expires    DateTime
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

// Custom Models
model Meal {
  id                  Int         @id
  name                String      
  placeholderImage    String?     
  textureColor        String?     
  createdAt           DateTime    @default(now()) @map(name: "created_at")
  user                User?       @relation(fields: [userId], references:[id])
  userId              Int?
}
